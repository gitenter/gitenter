# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@3.1.0
  aws-ecs: circleci/aws-ecs@0.0.7

executors:
  java-with-postgres-executor:
    docker:
      - image: circleci/openjdk:11.0-jdk
        environment:
          TEST_DATABASE_URL: postgresql://postgres@localhost/gitenter

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

      # TODO:
      # Currently follows
      # https://circleci.com/docs/2.0/databases/#postgresql-database-testing-example
      # https://circleci.com/docs/2.0/postgres-config/
      # Consider using a custom docker image.
      #
      # TODO:
      # The below line is in log:
      # /usr/local/bin/docker-entrypoint.sh: ignoring /docker-entrypoint-initdb.d/*
      # So it is possible that set volume and copy `docker/database/docker_init.sh`
      # will initialize the database.
      - image: circleci/postgres:11
        environment:
          POSTGRES_PASSWORD: postgres

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

  python-executor:
    docker:
      - image: circleci/python:3.6.5

    working_directory: ~/python

jobs:
  java-build:
    executor: java-with-postgres-executor

    steps:
      - checkout

      # Download and cache dependencies
      #
      # TODO:
      # Caching doesn't work for multiple files, unless you list all POM files in a single
      # string and that seems also have problems. refer
      # https://circleci.com/docs/2.0/caching/
      # https://discuss.circleci.com/t/cant-checksum-multiple-files-with-slashes-in-the-file-path/20667
      #
      # TODO:
      # Go-offline does not work with multiple module project
      # > [ERROR] Failed to execute goal on project enzymark: Could not resolve dependencies
      # > for project com.gitenter:enzymark:jar:0.0.2-prototype: Could not find artifact
      # > com.gitenter:protease:jar:0.0.2-prototype in central (https://repo.maven.apache.org/maven2)
      # https://stackoverflow.com/questions/14694139/how-to-resolve-dependencies-between-modules-within-multi-module-project
      # https://issues.apache.org/jira/browse/MDEP-516
      # https://github.com/qaware/go-offline-maven-plugin
      #
      # Also refer to:
      # https://circleci.com/blog/persisting-data-in-workflows-when-to-use-caching-artifacts-and-workspaces/
      #
      # - restore_cache:
      #     keys:
      #     - m2-dependencies-{{ checksum "pom.xml" }}
      #
      # - run: mvn dependency:go-offline
      #
      # - save_cache:
      #     paths:
      #       - ~/.m2
      #     key: m2-dependencies-{{ checksum "pom.xml" }}

      # TODO (maybe out-of-date, check in the CircleCI local CLI):
      # Can't specify 10 or 11 or even 9.6.x, as the current `openjdk:10-jdk-node-browsers`
      # is probably in an older version of Linux which doesn't include this
      - run: sudo apt update && sudo apt install postgresql-client

      # install database schema
      # CircleCI needs `-h localhost -p 5432` to force TCP. Refer:
      # https://discuss.circleci.com/t/using-psql-command-in-circleci-2-0-build/14785
      # https://discuss.circleci.com/t/help-migrating-node-js-postgres-to-2-0/26863/10
      - run: psql -U postgres -h localhost -p 5432 -w -f database/create_users.sql
      - run: psql -U postgres -h localhost -p 5432 -w -f database/create_database.sql -v dbname=gitenter
      - run: psql -U postgres -h localhost -p 5432 -d gitenter -w -f database/initiate_database.sql
      - run: psql -U postgres -h localhost -p 5432 -d gitenter -w -f database/privilege_control.sql
      - run: psql -U postgres -h localhost -p 5432 -d gitenter -w -f database/alter_sequence.sql
      - run: psql -U postgres -h localhost -p 5432 -c 'ALTER DATABASE gitenter OWNER TO gitenter;'

      - run: mvn clean install

      # https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs
      # Persist the specified paths (workspace/echo-output) into the workspace for use in downstream job.
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: ~/repo/
          # Must be relative path from root
          paths:
            - capsid/target/*.war

  python-linter:
    executor: python-executor

    # https://circleci.com/docs/2.0/language-python/
    steps:
      - checkout

      - run:
          command: |  # use pipenv to install dependencies
            sudo pip install pipenv
            pipenv install

  acceptance-test:
    docker:
      - image: circleci/openjdk:11.0-jdk
    steps:
      - run: echo "success"

  deploy:
    docker:
      - image: circleci/openjdk:11.0-jdk
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/repo/

      - run: echo "success"
      # TODO:
      # Consider saving to final capsid.jar to an artifact.

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - java-build
      - python-linter
      - staging-readiness:
          type: approval
          requires:
           - java-build
           - python-linter
      - aws-ecr/build_and_push_image:
          # Running this step needs `tf-config/live/circle-demo` to be applied first
          # https://circleci.com/orbs/registry/orb/circleci/aws-ecr
          # https://github.com/CircleCI-Public/aws-ecr-orb
          requires:
            - staging-readiness
          account-url: AWS_ECR_ACCOUNT_URL # 662490392829.dkr.ecr.us-east-1.amazonaws.com
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          dockerfile: ./docker/circleci-demo/Dockerfile
          path: ./docker/circleci-demo
          region: AWS_DEFAULT_REGION
          repo: "${AWS_RESOURCE_NAME_PREFIX}"
          tag: "${CIRCLE_SHA1}"
      - aws-ecs/deploy-service-update:
          # Running this step needs `tf-config/live/circle-demo` to be applied first
          # https://circleci.com/orbs/registry/orb/circleci/aws-ecs
          requires:
            - aws-ecr/build_and_push_image
          aws-region: AWS_DEFAULT_REGION
          family: "${AWS_RESOURCE_NAME_PREFIX}-service"
          cluster-name: "${AWS_RESOURCE_NAME_PREFIX}-cluster"
          container-image-name-updates: "container=${AWS_RESOURCE_NAME_PREFIX}-service,tag=${CIRCLE_SHA1}"
      - acceptance-test:
          requires:
            - aws-ecr/build_and_push_image
      - production-readiness:
          type: approval
          requires:
            - acceptance-test
      - deploy:
          requires:
            - production-readiness
