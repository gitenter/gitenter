# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:11.0-jdk

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      # Download and cache dependencies
      #
      # TODO:
      # Caching doesn't work for multiple files, unless you list all POM files in a single
      # string and that seems also have problems. refer
      # https://circleci.com/docs/2.0/caching/
      # https://discuss.circleci.com/t/cant-checksum-multiple-files-with-slashes-in-the-file-path/20667
      #
      # TODO:
      # Go-offline does not work with multiple module project
      # > [ERROR] Failed to execute goal on project enzymark: Could not resolve dependencies
      # > for project com.gitenter:enzymark:jar:0.0.2-prototype: Could not find artifact
      # > com.gitenter:protease:jar:0.0.2-prototype in central (https://repo.maven.apache.org/maven2)
      # https://stackoverflow.com/questions/14694139/how-to-resolve-dependencies-between-modules-within-multi-module-project
      # https://issues.apache.org/jira/browse/MDEP-516
      # https://github.com/qaware/go-offline-maven-plugin
      #
      # - restore_cache:
      #     keys:
      #     - m2-dependencies-{{ checksum "pom.xml" }}
      #
      # - run: mvn dependency:go-offline
      #
      # - save_cache:
      #     paths:
      #       - ~/.m2
      #     key: m2-dependencies-{{ checksum "pom.xml" }}

      - run: mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V

  - unittest:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:11.0-jdk
        environment:
          TEST_DATABASE_URL: postgresql://postgres@localhost/gitenter

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

      # TODO:
      # Currently follows
      # https://circleci.com/docs/2.0/databases/#postgresql-database-testing-example
      # https://circleci.com/docs/2.0/postgres-config/
      # Consider using a custom docker image.
      #
      # TODO:
      # The below line is in log:
      # /usr/local/bin/docker-entrypoint.sh: ignoring /docker-entrypoint-initdb.d/*
      # So it is possible that set volume and copy `docker/database/docker_init.sh`
      # will initialize the database.
      - image: circleci/postgres:11
        environment:
          POSTGRES_PASSWORD: postgres

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      # TODO (maybe out-of-date, check in the CircleCI local CLI):
      # Can't specify 10 or 11 or even 9.6.x, as the current `openjdk:10-jdk-node-browsers`
      # is probably in an older version of Linux which doesn't include this
      - run: sudo apt update && sudo apt install postgresql-client

      # install database schema
      # CircleCI needs `-h localhost -p 5432` to force TCP. Refer:
      # https://discuss.circleci.com/t/using-psql-command-in-circleci-2-0-build/14785
      # https://discuss.circleci.com/t/help-migrating-node-js-postgres-to-2-0/26863/10
      - run: psql -U postgres -h localhost -p 5432 -w -f database/create_users.sql
      - run: psql -U postgres -h localhost -p 5432 -w -f database/create_database.sql -v dbname=gitenter
      - run: psql -U postgres -h localhost -p 5432 -d gitenter -w -f database/initiate_database.sql
      - run: psql -U postgres -h localhost -p 5432 -d gitenter -w -f database/privilege_control.sql
      - run: psql -U postgres -h localhost -p 5432 -d gitenter -w -f database/alter_sequence.sql
      - run: psql -U postgres -h localhost -p 5432 -c 'ALTER DATABASE gitenter OWNER TO gitenter;'

      # run the actual tests
      - run: mvn surefire:test -B

  - integration-test:
    steps:
      - run: echo "success"

  - acceptance-test:
    steps:
      - run: echo "success"

  - deploy:
    steps:
      - run: echo "success"

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build
      - unittest:
          requires:
            - build
      - integration-test:
          requires:
            - build
      - acceptance-test:
          requires:
            - unittest
            - integration-test
      - deploy:
          requires:
            - acceptance-test
