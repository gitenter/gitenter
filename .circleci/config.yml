version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@3.1.0
  aws-ecs: circleci/aws-ecs@0.0.8

executors:
  java-with-postgres-executor:
    docker:
      - image: circleci/openjdk:11.0-jdk
        environment:
          TEST_DATABASE_URL: postgresql://postgres@localhost/gitenter

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

      # TODO:
      # Currently follows
      # https://circleci.com/docs/2.0/databases/#postgresql-database-testing-example
      # https://circleci.com/docs/2.0/postgres-config/
      # Consider using a custom docker image.
      #
      # TODO:
      # The below line is in log:
      # /usr/local/bin/docker-entrypoint.sh: ignoring /docker-entrypoint-initdb.d/*
      # So it is possible that set volume and copy `docker/database/docker_init.sh`
      # will initialize the database.
      - image: circleci/postgres:11
        environment:
          POSTGRES_PASSWORD: postgres

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

  python-executor:
    docker:
      - image: circleci/python:3.6.5

    working_directory: ~/python

jobs:
  java-build:
    executor: java-with-postgres-executor

    steps:
      - checkout

      # Download and cache dependencies
      #
      # TODO:
      # Caching doesn't work for multiple files, unless you list all POM files in a single
      # string and that seems also have problems. refer
      # https://circleci.com/docs/2.0/caching/
      # https://discuss.circleci.com/t/cant-checksum-multiple-files-with-slashes-in-the-file-path/20667
      #
      # TODO:
      # Go-offline does not work with multiple module project
      # > [ERROR] Failed to execute goal on project enzymark: Could not resolve dependencies
      # > for project com.gitenter:enzymark:jar:0.0.2-prototype: Could not find artifact
      # > com.gitenter:protease:jar:0.0.2-prototype in central (https://repo.maven.apache.org/maven2)
      # https://stackoverflow.com/questions/14694139/how-to-resolve-dependencies-between-modules-within-multi-module-project
      # https://issues.apache.org/jira/browse/MDEP-516
      # https://github.com/qaware/go-offline-maven-plugin
      #
      # Also refer to:
      # https://circleci.com/blog/persisting-data-in-workflows-when-to-use-caching-artifacts-and-workspaces/
      #
      # - restore_cache:
      #     keys:
      #     - m2-dependencies-{{ checksum "pom.xml" }}
      #
      # - run: mvn dependency:go-offline
      #
      # - save_cache:
      #     paths:
      #       - ~/.m2
      #     key: m2-dependencies-{{ checksum "pom.xml" }}

      # TODO (maybe out-of-date, check in the CircleCI local CLI):
      # Can't specify 10 or 11 or even 9.6.x, as the current `openjdk:10-jdk-node-browsers`
      # is probably in an older version of Linux which doesn't include this
      - run: sudo apt update && sudo apt install postgresql-client

      # install database schema
      # CircleCI needs `-h localhost -p 5432` to force TCP. Refer:
      # https://discuss.circleci.com/t/using-psql-command-in-circleci-2-0-build/14785
      # https://discuss.circleci.com/t/help-migrating-node-js-postgres-to-2-0/26863/10
      - run: psql -U postgres -h localhost -p 5432 -w -f database/create_users.sql
      - run: psql -U postgres -h localhost -p 5432 -w -f database/create_database.sql -v dbname=gitenter
      - run: psql -U postgres -h localhost -p 5432 -d gitenter -w -f database/initiate_database.sql
      - run: psql -U postgres -h localhost -p 5432 -d gitenter -w -f database/privilege_control.sql
      - run: psql -U postgres -h localhost -p 5432 -d gitenter -w -f database/alter_sequence.sql
      - run: psql -U postgres -h localhost -p 5432 -c 'ALTER DATABASE gitenter OWNER TO gitenter;'

      - run: mvn clean install

      # https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs
      # Persist the specified paths (workspace/echo-output) into the workspace for use in downstream job.
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: ~/repo/
          # Must be relative path from root
          paths:
            - capsid/target/*.war

  python-linter:
    executor: python-executor

    # https://circleci.com/docs/2.0/language-python/
    steps:
      - checkout

      - run:
          command: |  # use pipenv to install dependencies
            sudo pip install pipenv
            pipenv install

  acceptance-test:
    docker:
      - image: circleci/openjdk:11.0-jdk
    steps:
      - run: echo "success"

  deploy:
    docker:
      - image: circleci/openjdk:11.0-jdk
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/repo/

      - run: echo "success"
      # TODO:
      # Consider saving to final capsid.jar to an artifact.

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - java-build
      - python-linter

      - qa-readiness:
          type: approval
          requires:
           - java-build
           - python-linter
      # The steps `aws-ecr/build_and_push_image` and `aws-ecs/deploy-service-update`
      # needs to apply `terraform apply` under `tf-config/live/circle-demo` first.
      # https://circleci.com/orbs/registry/orb/circleci/aws-ecr
      # https://github.com/CircleCI-Public/aws-ecr-orb
      #
      # TODO:
      # Consider adding a step to call `terraform apply` through CircleCI. Can
      # pass in `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` through command line.
      #
      # Before that, we need to setup remote S3 endpoint through.
      #
      # It may be needed to have some logic similar to
      # https://github.com/CircleCI-Public/circleci-demo-aws-ecs-ecr/blob/without_orbs/deploy.sh#L19-L28
      # to here to make sure `terraform apply` is completed before the next step.
      # We've seen checking too soon gives back a 503 error, and the error automatically
      # resolved itself after a while.
      #
      # TODO:
      # Check if it is possible to combine multiple steps in the same executor. Should
      # be just call the Orbs in executor definition rather than in workflows. Tried
      # orbs as steps in jobs which doesn't work.
      # TODO:
      # Redefine `ecs-circleci-qa` prefix as a pipeline variable (pre-release feature).
      # https://github.com/CircleCI-Public/api-preview-docs/blob/master/docs/pipeline-parameters.md
      # Notice that `parameters` can only be define in (1) jobs/... (2) through CircleCI
      # UI but nor in orbs.
      # https://circleci.com/docs/2.0/env-vars/
      - aws-ecr/build_and_push_image:
          requires:
            - qa-readiness
          account-url: AWS_ECR_ACCOUNT_URL # 662490392829.dkr.ecr.us-east-1.amazonaws.com
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          dockerfile: ./docker/circleci-demo/Dockerfile
          path: ./docker/circleci-demo
          region: AWS_DEFAULT_REGION
          repo: "ecs-circleci-qa-repository"
          tag: "${CIRCLE_SHA1}"
      - aws-ecs/deploy-service-update:
          # This orb is mostly doing `aws ecs update-service`
          # (https://docs.aws.amazon.com/cli/latest/reference/ecs/update-service.html)
          # That's the reason it doesn't need to hold any knowledge of the
          # Terraform config even if it is doing blue/green deployment.
          # Refer to a command-line (non-orb) implementation for which this
          # is shown clearly.
          # https://github.com/CircleCI-Public/circleci-demo-aws-ecs-ecr/blob/without_orbs/deploy.sh
          requires:
            - aws-ecr/build_and_push_image
          aws-region: AWS_DEFAULT_REGION
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          family: "ecs-circleci-qa-service"
          cluster-name: "ecs-circleci-qa-cluster"
          container-image-name-updates: "container=ecs-circleci-qa-service,image-and-tag=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/ecs-circleci-qa-repository:${CIRCLE_SHA1}"
          verify-revision-is-deployed: true
          post-steps:
            - run:
                name: Test the deployment
                command: |
                  TARGET_GROUP_ARN=$(aws ecs describe-services --cluster ecs-circleci-qa-cluster --services ecs-circleci-qa-service | jq -r '.services[0].loadBalancers[0].targetGroupArn')
                  ELB_ARN=$(aws elbv2 describe-target-groups --target-group-arns $TARGET_GROUP_ARN | jq -r '.TargetGroups[0].LoadBalancerArns[0]')
                  ELB_DNS_NAME=$(aws elbv2 describe-load-balancers --load-balancer-arns $ELB_ARN | jq -r '.LoadBalancers[0].DNSName')
                  curl -s --retry 10 http://$ELB_DNS_NAME | grep "Hello World!"
      - acceptance-test:
          requires:
            - aws-ecs/deploy-service-update
      # TODO:
      # Consider adding a step to call `terraform destroy` through CircleCI. Should be an `approval`
      # type step before this one, so we can use this QA environment for manual debugging too.
      # Notice that it is optional. Do not calling this step will accelerate the next build (as typically
      # zero thing needs to be changed). However, run multiple builds at the same time will cause race
      # condition, as they are sharing the same remote server.

      # TODO:
      # Check if there's a way to mark a build succeed even if we some deployment steps doesn't do.
      #
      # TODO:
      # Only show `prod-readiness` for master branch.
      - prod-readiness:
          type: approval
          requires:
            - java-build
            - python-linter
      - deploy:
          requires:
            - prod-readiness
