version: 2.1

executors:
  java-with-postgres-executor:
    docker:
      - image: circleci/openjdk:11.0.2-jdk
        environment:
          TEST_DATABASE_URL: postgresql://postgres@localhost/gitenter

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

      # TODO:
      # Currently follows
      # https://circleci.com/docs/2.0/databases/#postgresql-database-testing-example
      # https://circleci.com/docs/2.0/postgres-config/
      # Consider using a custom docker image.
      #
      # TODO:
      # The below line is in log:
      # /usr/local/bin/docker-entrypoint.sh: ignoring /docker-entrypoint-initdb.d/*
      # So it is possible that set volume and copy `docker/database/docker_init.sh`
      # will initialize the database.
      - image: circleci/postgres:11
        environment:
          POSTGRES_PASSWORD: postgres

      # TODO:
      # Should be consistent in version (Redis 5.0.5) with production setup, but
      # there is no CircleCI image for that yet.
      - image: circleci/redis:4-alpine

    working_directory: /tmp/java-build

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

  python-executor:
    docker:
      - image: circleci/python:3.7.3

    working_directory: ~/python

  python-with-postgres-executor:
    docker:
      - image: circleci/python:3.7.3
        environment:
          TEST_DATABASE_URL: postgresql://postgres@localhost/gitenter

      - image: circleci/postgres:11
        environment:
          POSTGRES_PASSWORD: postgres

    working_directory: ~/python

orbs:
  # Inline orbs:
  # https://circleci.com/docs/2.0/creating-orbs/#creating-inline-orbs
  inline-postgres:
    commands:
      initialize:
        steps:
          # `apt-get update || apt-get update` is because otherwise I'll have the following
          # error for jdk images:
          # > Could not open file /var/lib/apt/lists/deb.debian.org_debian_dists ...
          # https://discuss.circleci.com/t/apt-get-error-exited-with-code-100/26722
          # https://github.com/CircleCI-Public/gcp-cli-orb/issues/5
          #
          # TODO (maybe out-of-date, check in the CircleCI local CLI):
          # Can't specify 10 or 11 or even 9.6.x, as the current `openjdk:10-jdk-node-browsers`
          # is probably in an older version of Linux which doesn't include this
          - run: sudo apt-get update || sudo apt-get update && sudo apt install postgresql-client

          # install database schema
          # CircleCI needs `-h localhost -p 5432` to force TCP. Refer:
          # https://discuss.circleci.com/t/using-psql-command-in-circleci-2-0-build/14785
          # https://discuss.circleci.com/t/help-migrating-node-js-postgres-to-2-0/26863/10
          - run: psql -U postgres -h localhost -p 5432 -w -f database/create_users.sql
          - run: psql -U postgres -h localhost -p 5432 -w -f database/create_database.sql -v dbname=gitenter
          - run: psql -U postgres -h localhost -p 5432 -d gitenter -w -f database/initiate_database.sql
          - run: psql -U postgres -h localhost -p 5432 -d gitenter -w -f database/privilege_control.sql
          - run: psql -U postgres -h localhost -p 5432 -d gitenter -w -f database/alter_sequence.sql
          - run: psql -U postgres -h localhost -p 5432 -c 'ALTER DATABASE gitenter OWNER TO gitenter;'

  # TODO:
  # Looks like a bug that inline orb cannot refer to other orbs. Otherwise error:
  # > Cannot find orb 'aws-ecr' looking for command named 'aws-ecr/build-and-push-image'
  # https://discuss.circleci.com/t/unable-to-find-orb-with-inline-orb/27145
  # https://github.com/CircleCI-Public/aws-ecs-orb/issues/22
  inline-aws-operation:
    orbs:
      aws-cli: circleci/aws-cli@0.1.13
      aws-ecr: circleci/aws-ecr@6.0.0
      aws-ecs: circleci/aws-ecs@0.0.8

    commands:
      deploy:
        parameters:
          deploy_env:
            type: string
          service_infix:
            type: string
          docker_image_folder:
            type: string
        steps:
          # Otherwise will get the below error in "Build docker image" step:
          # > $ !/bin/bash -eo pipefail
          # > docker build \
          # >   \
          # >  -f ./docker/web/Dockerfile \
          # >  -t $AWS_ECR_ACCOUNT_URL/staging-repository:${CIRCLE_SHA1} \
          # >  ./docker/web
          # > ERRO[0000] failed to dial gRPC: cannot connect to the Docker daemon. Is 'docker daemon' running on this host?: dial unix /var/run/docker.sock: connect: no such file or directory
          # > context canceled
          # > Exited with code 1
          # https://circleci.com/docs/2.0/building-docker-images/
          - setup_remote_docker:
              docker_layer_caching: true

          - aws-ecr/build-and-push-image:
              checkout: false
              attach-workspace: true
              # Looks like there's a bug in `aws-ecr/build_and_push_image`. Notice that there's nowhere
              # to specify `working_directory` (in its source code https://github.com/CircleCI-Public/aws-ecr-orb)
              # and it is actually it is using `.`. That's the reason it actually doesn't support any
              # `workspace-root` which is not `.` (bug reported https://github.com/CircleCI-Public/aws-ecr-orb/issues/32)
              #
              # It works fine in here to just specify `workspace-root` to be also `.`.
              # However, for e.g. `circleci/openjdk:11.0-jdk` we actually canNOT specify `working_directory`
              # to be `.`, otherwise we'll get the error of (https://circleci.com/gh/gitenter/gitenter/398)
              # > Directory (.) you are trying to checkout to is not empty and not git repository
              workspace-root: .
              account-url: AWS_ECR_ACCOUNT_URL # 662490392829.dkr.ecr.us-east-1.amazonaws.com
              aws-access-key-id: AWS_ACCESS_KEY_ID
              aws-secret-access-key: AWS_SECRET_ACCESS_KEY
              dockerfile: ./<<parameters.docker_image_folder>>/Dockerfile
              path: ./<<parameters.docker_image_folder>>
              region: AWS_DEFAULT_REGION
              # There's a typo in the document, which said here should be "A URI to an Amazon ECR repository"
              # but actually it should be just "Name of an Amazon ECR repository". Somebody else reported the problem:
              # https://github.com/CircleCI-Public/aws-ecr-orb/pull/31
              repo: "<<parameters.service_infix>>-repository"
              tag: "${CIRCLE_SHA1}"

          # May be no need for this part, because it is technically inside of `aws-ecr/build-and-push-image`.
          # https://circleci.com/orbs/registry/orb/circleci/aws-cli
          - aws-cli/install
          - aws-cli/configure:
              aws-access-key-id: AWS_ACCESS_KEY_ID
              aws-secret-access-key: AWS_SECRET_ACCESS_KEY
              aws-region: AWS_DEFAULT_REGION

          # # This orb is mostly doing `aws ecs update-service --cluster staging-cluster --service staging-web-app-service --force-new-deployment`
          # (https://docs.aws.amazon.com/cli/latest/reference/ecs/update-service.html)
          # That's the reason it doesn't need to hold any knowledge of the
          # Terraform config even if it is doing blue/green deployment.
          # Refer to a command-line (non-orb) implementation for which this
          # is shown clearly.
          # https://github.com/CircleCI-Public/circleci-demo-aws-ecs-ecr/blob/without_orbs/deploy.sh
          #
          # TODO:
          # We may be able to use `update-task-definition` command, which basically is using
          # `aws ecs register-task-definition` command, as for us only the Docker image/tag names
          # are changed. The current `update-service` uses `update-service`.
          # However, it may be possible that if we want to use "blue/green (CODE_DEPLOY ) deployment
          # controller" (rather than just replace the image inside) we need to update service.
          # https://docs.aws.amazon.com/cli/latest/reference/ecs/register-task-definition.html
          - aws-ecs/update-service:
              family: "<<parameters.deploy_env>>-<<parameters.service_infix>>-service"
              cluster-name: "<<parameters.deploy_env>>-cluster"
              container-image-name-updates: "container=<<parameters.deploy_env>>-<<parameters.service_infix>>-service,image-and-tag=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/<<parameters.service_infix>>-repository:${CIRCLE_SHA1}"
              verify-revision-is-deployed: true

      confirm-web-deployment:
        parameters:
          deploy_env:
            type: string
          service_infix:
            type: string
        steps:
          - run:
              name: Web deployment sanity check
              command: |
                TARGET_GROUP_ARN=$(aws ecs describe-services --cluster <<parameters.deploy_env>>-cluster --services <<parameters.deploy_env>>-<<parameters.service_infix>>-service | jq -r '.services[0].loadBalancers[0].targetGroupArn')
                ELB_ARN=$(aws elbv2 describe-target-groups --target-group-arns $TARGET_GROUP_ARN | jq -r '.TargetGroups[0].LoadBalancerArns[0]')
                ELB_DNS_NAME=$(aws elbv2 describe-load-balancers --load-balancer-arns $ELB_ARN | jq -r '.LoadBalancers[0].DNSName')
                curl -s --retry 10 http://$ELB_DNS_NAME/health_check | grep "GitEnter"

jobs:
  java-build:
    executor: java-with-postgres-executor
    steps:
      - checkout

      # Download and cache dependencies
      #
      # TODO:
      # Caching doesn't work for multiple files, unless you list all POM files in a single
      # string and that seems also have problems. refer
      # https://circleci.com/docs/2.0/caching/
      # https://discuss.circleci.com/t/cant-checksum-multiple-files-with-slashes-in-the-file-path/20667
      #
      # TODO:
      # Go-offline does not work with multiple module project
      # > [ERROR] Failed to execute goal on project enzymark: Could not resolve dependencies
      # > for project com.gitenter:enzymark:jar:0.0.2-prototype: Could not find artifact
      # > com.gitenter:protease:jar:0.0.2-prototype in central (https://repo.maven.apache.org/maven2)
      # https://stackoverflow.com/questions/14694139/how-to-resolve-dependencies-between-modules-within-multi-module-project
      # https://issues.apache.org/jira/browse/MDEP-516
      # https://github.com/qaware/go-offline-maven-plugin
      #
      # Also refer to:
      # https://circleci.com/blog/persisting-data-in-workflows-when-to-use-caching-artifacts-and-workspaces/
      #
      # - restore_cache:
      #     keys:
      #     - m2-dependencies-{{ checksum "pom.xml" }}
      #
      # - run: mvn dependency:go-offline
      #
      # - save_cache:
      #     paths:
      #       - ~/.m2
      #     key: m2-dependencies-{{ checksum "pom.xml" }}

      - inline-postgres/initialize

      - run: mvn clean install
      - run: mvn compile assembly:single -f hooks/post-receive/pom.xml -DskipTests
      - run: mvn package -f capsid/pom.xml -DskipTests

      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/ \;
          when: always
      - store_test_results:
          path: ~/test-results

      # https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs
      # Persist the specified paths (workspace/echo-output) into the workspace for use in downstream job.
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: /tmp/java-build/
          # Must be relative path from root
          paths:
            - capsid/target/*.war

  python-unittest:
    executor: python-with-postgres-executor
    steps:
      - checkout
      - inline-postgres/initialize

      # https://circleci.com/docs/2.0/language-python/
      #
      # TODO:
      # Cache pip libraries.
      - run: sudo pip3 install pipenv
      - run: cd ssheep && pipenv install --dev
      - run: cd ssheep && pipenv run pytest
      - store_test_results:
          path: ssheep/test-results

  python-linter:
    executor: python-executor
    steps:
      - checkout

      - run: sudo pip3 install pipenv
      - run: cd ssheep && pipenv install flake8
      - run: cd ssheep && pipenv run flake8 --statistics
      - run: cd selenium-test && pipenv install flake8
      - run: cd selenium-test && pipenv run flake8 --statistics

  staging-web-app-deploy:
    # TODO:
    # Looks like the current `aws-ecr/build-and-push-image` depends on python version.
    # When using 2.7 "Log into Amazon ECR" can pass with no problem (other errors apply):
    # https://circleci.com/gh/gitenter/gitenter/628
    # But when using 3.7.1 the same step gives
    # > Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?
    # https://circleci.com/gh/gitenter/gitenter/635
    docker:
      - image: 'circleci/python:2.7'

    working_directory: ~/python

    steps:
      - checkout
      - inline-aws-operation/deploy:
          deploy_env: "staging"
          service_infix: "web-app"
          docker_image_folder: "capsid"
      - inline-aws-operation/confirm-web-deployment:
          deploy_env: "staging"
          service_infix: "web-app"

  staging-git-deploy:
    docker:
      - image: 'circleci/python:2.7'

    working_directory: ~/python

    steps:
      - checkout

      - inline-aws-operation/deploy:
          deploy_env: "staging"
          service_infix: "git"
          docker_image_folder: "ssheep"
    # TODO:
    # Now we can `ssh git@<git_lb_hostname>` to that server. And if the SSH key is added
    # through web UI (so save in the database) the password is not needed. Should add test on that.
    #
    # TODO:
    # environment variable passed in, locally execute `python3 get_authorized_keys_content.py` gives
    # reasonable result. However, it seems when I `ssh` in I was still asked password.
    #
    # TODO:
    # Realized sometimes it works while sometimes not (it will say password is not
    # correct). Wonder why that happens?
    # 10.0.1.152 8080 us-east-1b initial
    # 10.0.0.17 8080 us-east-1a initial
    # 10.0.1.170 22 us-east-1b healthy
    # 10.0.1.14 22 us-east-1b healthy => works
    # 10.0.0.160 8080 us-east-1a healthy
    # 10.0.1.219 8080 us-east-1b healthy
    # 10.0.0.192 22 us-east-1a healthy
    # 10.0.0.45 22 us-east-1a healthy => works

  # https://circleci.com/docs/2.0/project-walkthrough/#installing-and-running-selenium-to-automate-browser-testing
  # https://github.com/CircleCI-Public/circleci-demo-python-flask/blob/master/tests/test_selenium.py
  e2e-test:
    docker:
      - image: circleci/python:3.6.2-stretch-browsers
    working_directory: ~/selenium
    steps:
      - checkout
      - run: sed -i "s/profile = LocalProfile()/profile = StagingProfile()/g" selenium-test/settings/profile.py

      - run:
          name: Download Selenium
          command: |
            curl -O http://selenium-release.storage.googleapis.com/3.5/selenium-server-standalone-3.5.3.jar

      - run: cd selenium-test && sudo pip3 install -r pip-requirements.txt

      # TODO:
      # Run all tests, especially add tests which needs `pygit2`.
      - run: cd selenium-test && pytest tests/authorization_test.py tests/member_settings_test.py tests/organization_creation_test.py tests/organization_management_test.py tests/repository_creation_test.py tests/repository_management_test.py

      - store_test_results:
          path: selenium-test/test-results/

  deploy:
    docker:
      - image: circleci/openjdk:11.0-jdk
    # Cannot specify `working_directory` to be `.`. Otherwise you'll get error
    # > Directory (.) you are trying to checkout to is not empty and not git repository
    # That may or may not happen depend on the detail of the image, but we should
    # just avoid it in general.
    working_directory: /tmp/build
    steps:
      # `checkout` is for files on GIT. `attach_workspace` is for files saved from
      # `persist_to_workspace`->`path`. Needs to execute both so we can have both
      # files (Dockerfile and WAR) needed for the following steps.
      - checkout
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /tmp/build

      - run: ls /tmp/build/
      - run: echo "success"
      # TODO:
      # Consider saving to final capsid.jar to an artifact.

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - java-build
      - python-unittest
      - python-linter

      - staging-readiness:
          type: approval
          requires:
           - java-build
           - python-unittest
           - python-linter
      # The steps `aws-ecr/build_and_push_image` and `aws-ecs/deploy-service-update`
      # needs to apply `terraform apply` under `tf-config/live/ecs-circleci-staging` first.
      # https://circleci.com/orbs/registry/orb/circleci/aws-ecr
      # https://github.com/CircleCI-Public/aws-ecr-orb
      #
      # TODO:
      # Consider adding a step to call `terraform apply` through CircleCI. Can
      # pass in `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` through command line.
      #
      # Before that, we need to setup remote S3 endpoint through.
      #
      # It may be needed to have some logic similar to
      # https://github.com/CircleCI-Public/circleci-demo-aws-ecs-ecr/blob/without_orbs/deploy.sh#L19-L28
      # to here to make sure `terraform apply` is completed before the next step.
      # We've seen checking too soon gives back a 503 error, and the error automatically
      # resolved itself after a while.
      #
      # Probably not, as configuration management (with lower frequency to be updated,
      # and also for risk management) is typically not part of the CI workflow.
      #
      # TODO:
      # Check if it is possible to combine multiple steps in the same executor. Should
      # be just call the Orbs in executor definition rather than in workflows. Tried
      # orbs as steps in jobs which doesn't work.
      #
      # TODO:
      # Redefine `staging` prefix as a pipeline variable (pre-release feature).
      # https://github.com/CircleCI-Public/api-preview-docs/blob/master/docs/pipeline-parameters.md
      # Notice that `parameters` can only be define in (1) jobs/... (2) through CircleCI
      # UI but nor in orbs.
      # https://circleci.com/docs/2.0/env-vars/
      - staging-web-app-deploy:
          requires:
            - staging-readiness

      - staging-git-deploy:
          requires:
            - staging-readiness

      - e2e-test:
          requires:
            - staging-web-app-deploy
            - staging-git-deploy
      # TODO:
      # Consider adding a step to call `terraform destroy` through CircleCI. Should be an `approval`
      # type step before this one, so we can use this staging environment for manual debugging too.
      # Notice that it is optional. Do not calling this step will accelerate the next build (as typically
      # zero thing needs to be changed). However, run multiple builds at the same time will cause race
      # condition, as they are sharing the same remote server.

      # TODO:
      # Check if there's a way to mark a build succeed even if we some deployment steps doesn't do.
      #
      # TODO:
      # Only show `prod-readiness` for master branch.
      - prod-readiness:
          type: approval
          requires:
            - java-build
            - python-linter
      - deploy:
          requires:
            - prod-readiness
