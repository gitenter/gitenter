<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.gitenter</groupId>
        <artifactId>gitenter-parent</artifactId>
        <version>0.0.2-prototype</version>
    </parent>
    <artifactId>capsid</artifactId>
    <packaging>war</packaging>

    <name>Capsid</name>
    <description>The web layer</description>

    <properties>
        <rest-assured-version>4.1.2</rest-assured-version>
    </properties>

    <build>
        <plugins>
            <!-- This is to avoid the "webxml attribute is required" error.
                 May not be needed for maven 3.0.0+ as the default has been changed to `false`.
                 https://stackoverflow.com/questions/5351948/webxml-attribute-is-required-error-in-maven
            -->
            <plugin>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.2.2</version>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                    <outputDirectory>capsid/target/</outputDirectory>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot-version}</version>
            </plugin>
        </plugins>
    </build>

    <dependencyManagement>
        <dependencies>
            <!-- Import -->
            <!-- We cannot use `spring-boot-starter-parent` as parent, as we have our customized
                parent. See the following reference:
                https://www.baeldung.com/spring-boot-dependency-management-custom-parent
            -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot-version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.session</groupId>
                <artifactId>spring-session-bom</artifactId>
                <version>Bean-SR4</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- local packages -->
        <dependency>
            <groupId>com.gitenter</groupId>
            <artifactId>gitar</artifactId>
            <version>${gitar-version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.gitenter</groupId>
            <artifactId>protease</artifactId>
            <version>${project.version}</version>
            <!--
                Exclude everything, because "protease" is a Spring application,
                and "capsid" is a Spring Boot application. They only share the
                domain model code, but not the Spring setups.
            -->
            <exclusions>
                <exclusion>
                    <groupId>*</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.gitenter</groupId>
            <artifactId>enzymark</artifactId>
            <version>${project.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>*</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Compile -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
<!--            <exclusions>-->
                <!-- TODO:
                    Since we already excluded "slf4j-log4j12" in other packages,
                    if we decided to go with "logback", we don't need to remove
                    them in here.
                    "mvn package" works fine, but for some reason STS cannot work
                    in this way (it still find "slf4j-log4j12" somewhere althouth
                    it is not in "mvn dependency:tree". So I am still removing it
                    in here.
                -->
<!--                <exclusion>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-classic</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>log4j-over-slf4j</artifactId>
                </exclusion>
            </exclusions>-->
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
<!--        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-logging</artifactId>
        </dependency>-->
<!--        <dependency>
            <groupId>org.liquibase</groupId>
            <artifactId>liquibase-core</artifactId>
        </dependency>-->
        <dependency>
            <groupId>org.springframework.session</groupId>
            <artifactId>spring-session-data-redis</artifactId>
            <!-- No need to provide a version. Managed by Spring Boot. -->
        </dependency>
        <!-- `spring-security-oauth2` is deprecating from 2.4.0, but Spring
        security (currently uses 5.2.1 based on `spring-boot-starter-security`
        seems still no yet for replacement). Right now for spring boot version
        2.2.2 the derived `spring-security-oauth2` version is 2.3.8 for which
        the deprecating notice has not been shown yet. We'll just wait for
        Spring security to be better (and better documented) to migration.

        References:

        Official blog about migrating
        https://spring.io/blog/2018/01/30/next-generation-oauth-2-0-support-with-spring-security

        Migration guide
        https://github.com/spring-projects/spring-security/wiki/OAuth-2.0-Migration-Guide

        A concrete example on how to implement a resource server in Spring Security.
        Not quite easy to follow.
        https://github.com/spring-projects/spring-security/tree/master/samples/boot/oauth2resourceserver

        Document from Spring boot (so not include the document of the deprecated
        part). It writes explicitly that authorization server cannot be implemented yet.
        https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-security-oauth2

        This official document is mostly still using `spring-security-oauth2`
        https://spring.io/guides/tutorials/spring-boot-oauth2/
        -->
        <dependency>
            <groupId>org.springframework.security.oauth.boot</groupId>
            <artifactId>spring-security-oauth2-autoconfigure</artifactId>
            <version>${spring-boot-version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-jwt</artifactId>
            <version>1.0.11.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-taglibs</artifactId>
        </dependency>
        <dependency>
            <!-- Since we exclude all the dependencies of "protease",
                 this one need to be added manually. -->
            <groupId>org.apache.sshd</groupId>
            <artifactId>sshd-core</artifactId>
            <version>1.7.0</version>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
        </dependency>
        <dependency>
            <groupId>redis.clients</groupId>
            <artifactId>jedis</artifactId>
            <version>3.1.0</version>
            <type>jar</type>
        </dependency>

        <!-- Runtime -->
<!--        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-properties-migrator</artifactId>
            <scope>runtime</scope>
        </dependency>-->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok-version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-jasper</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.tiles</groupId>
            <artifactId>tiles-jsp</artifactId>
            <version>3.0.8</version>
        </dependency>
        <dependency>
            <groupId>com.atlassian.commonmark</groupId>
            <artifactId>commonmark</artifactId>
            <version>${commonmark-version}</version>
        </dependency>
        <dependency>
            <groupId>com.atlassian.commonmark</groupId>
            <artifactId>commonmark-ext-gfm-tables</artifactId>
            <version>${commonmark-version}</version>
        </dependency>
        <dependency>
            <groupId>com.atlassian.commonmark</groupId>
            <artifactId>commonmark-ext-gfm-strikethrough</artifactId>
            <version>${commonmark-version}</version>
        </dependency>

        <!-- Test -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>${rest-assured-version}</version>
            <scope>test</scope>
        </dependency>
        <!--
            The below two packages are included in `rest-assured`. However, Spring load
            3.1.1 for which the class name has been changed after that. Therefore, we
            need to include them explicitly, or otherwise we'll get errors for
            `java.lang.NoClassDefFoundError`
            https://stackoverflow.com/questions/44993615/java-lang-noclassdeffounderror-io-restassured-mapper-factory-gsonobjectmapperfa
        -->
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>json-path</artifactId>
            <version>${rest-assured-version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>xml-path</artifactId>
            <version>${rest-assured-version}</version>
            <scope>test</scope>
        </dependency>

<!--         <dependency>
            <groupId>org.springframework.test.htmlunit</groupId>
            <artifactId>spring-test-htmlunit</artifactId>
            <version>1.0.0.RC1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-htmlunit-driver</artifactId>
            <version>2.45.0</version>
            <scope>test</scope>
        </dependency> -->
    </dependencies>

</project>
