# TODO:
# Properly testup compiling from dev-machine. Also makes local
# compiling compatible to the change.

# Needs to be extremely careful on whether we have a space after `#` in here
# and CircleCI `config.yml`. Their mismatch will cause failures.
spring.profiles.active=sts
#spring.profiles.active=docker
#spring.profiles.active=qa
#spring.profiles.active=production

# Disable feature detection by this undocumented parameter.
# Check the org.hibernate.engine.jdbc.internal.JdbcServiceImpl.configure method for more details.
# And because detection is disabled we have to set correct dialect by hand.
# Refer: https://vkuzel.com/spring-boot-jpa-hibernate-atomikos-postgresql-exception
#
# Currently not working in my case, because "com.gitenter.protease.config.JpaConfig"
# is in path, and this setup get override in there.
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL9Dialect

# Sharing user's session in a database or a file system (suggested Redis)
# Alternative approach should be using sticky sessions (setup in load balance)
# with session replication (setup in server).
#
# General information for difference choices:
# https://www.haproxy.com/blog/load-balancing-affinity-persistence-sticky-sessions-what-you-need-to-know/
# https://stackoverflow.com/questions/10494431/sticky-and-non-sticky-sessions
#
# It is relatively easy to setup sticky sessions in AWS. For ALB, it is defined in target group
# https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html#sticky-sessions
# while if we use ELB, it is defined inside of the load balancer
# https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html
# https://www.terraform.io/docs/providers/aws/r/lb_cookie_stickiness_policy.html
#
# To setup sesson replication in Tomcat we can refer:
# https://tomcat.apache.org/tomcat-8.0-doc/cluster-howto.html
# https://icicimov.github.io/blog/high-availability/Tomcat7-clustering-and-session-replication/
# However, since AWS doesn't support multicast between different zones, this is really
# hard to implement. Therefore, we decide to go with Spring session.
#
# Refer to: https://docs.spring.io/spring-session/docs/2.1.6.BUILD-SNAPSHOT/reference/html5/guides/boot-redis.html
#
# To clean up the session keys, one can just log into Redis and flush all:
# > $ redis-cli
# > 127.0.0.1:6379> KEYS *
# > 127.0.0.1:6379> FLUSHALL
spring.session.store-type=redis
server.servlet.session.timeout=86400
spring.session.redis.flush-mode=on-save
spring.session.redis.namespace=spring:session
