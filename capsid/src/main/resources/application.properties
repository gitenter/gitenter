# TODO:
# Properly testup compiling from dev-machine. Also makes local
# compiling compatible to the change.
spring.profiles.active=sts
#spring.profiles.active=docker
#spring.profiles.active=qa
#spring.profiles.active=production

# Without it the system works fine locally (local compile or locally build and run docker image). 
# However, by using the docker image build from CircleCI, (inside of the container) tomcat complains 
# "Failed to determine a suitable driver class". This happens in both ECS and pull the ECR docker
# image locally. Error message:
# > Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean
# > with name 'securityConfig': Unsatisfied dependency expressed through field 'userDetailsService'; 
# > nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating 
# > bean with name 'userDetailsServiceImpl': Unsatisfied dependency expressed through field 
# > 'memberRepository'; nested exception is org.springframework.beans.factory.BeanCreationException: 
# > Error creating bean with name 'memberRepository': Cannot create inner bean '(inner bean)#5ab1577' 
# > of type [org.springframework.orm.jpa.SharedEntityManagerCreator] while setting bean property 
# > 'entityManager'; nested exception is org.springframework.beans.factory.BeanCreationException: Error 
# > creating bean with name '(inner bean)#5ab1577': Cannot resolve reference to bean 'entityManagerFactory' 
# > while setting constructor argument; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: 
# > Error creating bean with name 'jpaConfig': Unsatisfied dependency expressed through field 'dataSource'; 
# > nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with 
# > name 'dataSource' defined in class path resource [org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration$Hikari.class]: 
# > Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: 
# > Failed to instantiate [com.zaxxer.hikari.HikariDataSource]: Factory method 'dataSource' threw exception; 
# > nested exception is org.springframework.boot.autoconfigure.jdbc.DataSourceProperties$DataSourceBeanCreationException: 
# > Failed to determine a suitable driver class
# After the change, the error becomes 
# > Failed to determine suitable jdbc url
#
# Not sure why we need to specify duplicate driver in here and `DatabaseConfig`, but it is suggested by:
# https://www.baeldung.com/spring-boot-failed-to-configure-data-source
#
# The other suggestion is to make the scope of `spring-boot-starter-data-jpa` to be `provided`. Not sure
# if it works: 
# https://github.com/spring-projects/spring-boot/issues/13796#issuecomment-413313346
#spring.datasource.url=jdbc:postgresql://ecs-circleci-qa-postgres.cqx7dy9nh94t.us-east-1.rds.amazonaws.com/gitenter
#spring.datasource.username=gitenter_app
#spring.datasource.password=zooo
#spring.datasource.driver-class-name=org.postgresql.Driver

# Disable feature detection by this undocumented parameter.
# Check the org.hibernate.engine.jdbc.internal.JdbcServiceImpl.configure method for more details.
# And because detection is disabled we have to set correct dialect by hand.
# Refer: https://vkuzel.com/spring-boot-jpa-hibernate-atomikos-postgresql-exception
#
# Currently not working in my case, because "com.gitenter.protease.config.JpaConfig"
# is in path, and this setup get override in there.
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL9Dialect
